stages:
    - test
    - build
    - misc
    - image
    - deploy

variables:
    CARGO_HOME: /root/.cargo
    SCCACHE_VERSION: v0.2.15
    SCCACHE_S3_USE_SSL: "true"
    SCCACHE_BUCKET: "sccache"

    REDIS_DSN: redis://redis:6379/
    SQLX_OFFLINE: "true"

# Run tests on current stable Rust version
test:latest: &base_test
    image: rust:1.53-slim-buster
    stage: test
    services:
        - redis
    cache:
        paths:
            - .cargo/
        policy: pull-push
    before_script:
        # Use proxy for apt, install wget to download sccache and other deps
        - export http_proxy=$DEBIAN_PROXY
        - apt-get update -y
        - apt-get install -y wget libssl-dev pkg-config libavcodec-dev libavformat-dev libavutil-dev libavdevice-dev clang llvm python3 python3-pip
        - unset http_proxy

        # Download and extract sccache, ensuring it's executable
        - wget -q -O /tmp/sccache.tar.gz https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz
        - tar zxvf /tmp/sccache.tar.gz --strip-components=1 -C /tmp
        - export RUSTC_WRAPPER=/tmp/sccache
        - chmod a+x $RUSTC_WRAPPER

        # Move sccache config into place
        - mkdir -p $HOME/.config/sccache
        - mv $SCCACHE_CONFIG $HOME/.config/sccache/config

        # Prepare cargo data from cache
        - rm -rf /root/.cargo || true
        - mv .cargo /root/.cargo || true

        # Prepare cargo-cache for cleaning data later
        - cargo install cargo-cache --no-default-features --features ci-autoclean

        # Other application specific config
        - export RELEASE=$CI_COMMIT_SHA
    script:
        # Build, test, and show stats
        - cargo build --verbose
        - cargo test --verbose
        - cargo test --verbose -- --ignored
        - $RUSTC_WRAPPER --show-stats

        # Clean cargo data, move back into place for caching
        - $CARGO_HOME/bin/cargo-cache
        - rm -rf .cargo || true
        - mv /root/.cargo .cargo || true

# Same as above, but nightly Rust
test:nightly:
    <<: *base_test
    image: rustlang/rust:nightly-slim
    allow_failure: true

build:bot: &base_build
    <<: *base_test
    stage: build
    cache:
        policy: pull
    needs: ['test:latest']
    services: []
    artifacts:
        expire_in: 1 day
        paths:
            - ./foxbot/foxbot
    script:
        - cargo build --verbose --release --bin foxbot
        - $RUSTC_WRAPPER --show-stats
        - mv ./target/release/foxbot ./foxbot/foxbot

build:background-worker:
    <<: *base_build
    artifacts:
        expire_in: 1 day
        paths:
            - ./foxbot-background-worker/foxbot-background-worker
    script:
        - cargo build --verbose --release --bin foxbot-background-worker
        - $RUSTC_WRAPPER --show-stats
        - mv ./target/release/foxbot-background-worker ./foxbot-background-worker/foxbot-background-worker

build:discord:
    <<: *base_build
    artifacts:
        expire_in: 1 day
        paths:
            - ./foxbot-discord/foxbot-discord
    script:
        - cargo build --verbose --release --bin foxbot-discord
        - $RUSTC_WRAPPER --show-stats
        - mv ./target/release/foxbot-discord ./foxbot-discord/foxbot-discord

misc:base:
    stage: misc
    image: docker
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    needs: []
    script:
        - docker pull $CI_REGISTRY_IMAGE/base:latest || true
        - docker build --build-arg http_proxy=$DEBIAN_PROXY --cache-from $CI_REGISTRY_IMAGE/base:latest --tag $CI_REGISTRY_IMAGE/base:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/base:latest -f Dockerfile .
        - docker push $CI_REGISTRY_IMAGE/base:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE/base:latest

image:bot: &base_images
    stage: image
    image: docker
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    needs: ['build:bot', 'misc:base']
    script:
        - docker pull $CI_REGISTRY_IMAGE/bot:latest || true
        - docker build --build-arg http_proxy=$DEBIAN_PROXY --cache-from $CI_REGISTRY_IMAGE/bot:latest --tag $CI_REGISTRY_IMAGE/bot:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/bot:latest -f foxbot/Dockerfile .
        - docker push $CI_REGISTRY_IMAGE/bot:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE/bot:latest

image:background-worker:
    <<: *base_images
    needs: ['build:background-worker', 'misc:base']
    script:
        - docker pull $CI_REGISTRY_IMAGE/background-worker:latest || true
        - docker build --build-arg http_proxy=$DEBIAN_PROXY --cache-from $CI_REGISTRY_IMAGE/background-worker:latest --tag $CI_REGISTRY_IMAGE/background-worker:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/background-worker:latest -f foxbot-background-worker/Dockerfile .
        - docker push $CI_REGISTRY_IMAGE/background-worker:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE/background-worker:latest

image:discord:
    <<: *base_images
    needs: ['build:discord', 'misc:base']
    script:
        - docker pull $CI_REGISTRY_IMAGE/discord:latest || true
        - docker build --build-arg http_proxy=$DEBIAN_PROXY --cache-from $CI_REGISTRY_IMAGE/discord:latest --tag $CI_REGISTRY_IMAGE/discord:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/discord:latest -f foxbot-discord/Dockerfile .
        - docker push $CI_REGISTRY_IMAGE/discord:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE/discord:latest

deploy:
    image: debian:buster-slim
    when: manual
    stage: deploy
    only:
        - main
    needs: ['image:bot', 'image:background-worker', 'image:discord']
    resource_group: production
    before_script:
        - export http_proxy=$DEBIAN_PROXY
        - apt-get update -y && apt-get install -y openssh-client
        - unset http_proxy
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | base64 -d | ssh-add -
        - mkdir -p $HOME/.ssh
        - chmod 700 $HOME/.ssh
    script:
        - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "sh -c 'RELEASE=$CI_COMMIT_SHA /deploy/foxbot.sh'"
